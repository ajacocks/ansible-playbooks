---

- name: Provision Terraform for AAP-HashiCorp integrated demo
  hosts: "{{ groups['aap_hashi_terraform'][0] }}"
  tags: terraform_provision

  roles:
    - name: terraform_provision

- name: Run installation for terraform
  hosts: "{{ groups['aap_hashi_terraform'][0] }}"
  tags: terraform_install

  vars:
    ansible_user: "{{ terraform_user }}"

  roles:
    - name: terraform_install

  tasks:

    - name: Copy admin token back
      ansible.builtin.fetch:
        src: "{{ terraform_install_admin_token }}"
        dest: "{{ local_certdir }}/terraform-admin_token.txt"
        flat: true

- name: Use terraform to create demo infrastructure
  hosts: "{{ groups['aap_hashi_terraform'][0] }}"
  tags: terraform_create_demo

  vars:
    ansible_user: "{{ terraform_user }}"
    content_filename: "content-{{ ansible_date_time.epoch }}.tar.gz"
    aws_access_key_id: "{{ lookup('ansible.builtin.pipe', 'aws configure --profile sandbox get aws_access_key_id') }}"
    aws_secret_access_key: "{{ lookup('ansible.builtin.pipe', 'aws configure --profile sandbox get aws_secret_access_key') }}"
  
  tasks:

    - name: Check to see if admin workspace already exists
      ignore_errors: true
      ansible.builtin.uri:
        url: "https://terraform.{{ install_domain }}/api/v2/organizations/{{ terraform_install_admin_orgname }}/workspaces/{{ terraform_install_admin_workspacename }}"
        method: GET
        headers:
          Content-Type: application/vnd.api+json
          Authorization: Bearer {{ admin_login }}
        body_format: json
        status_code:
          - 200
      register: admin_ws_exists

    - name: Debug admin_ws_exists
      ansible.builtin.debug:
        msg: "{{ admin_ws_exists }}"
      when: debug | default(false)

    - name: Create admin workspace which will auto-apply plans
      when: ( admin_login_file.stat.exists | bool ) and ( admin_ws_exists.failed )
      block:

        - name: Create workspace for admin organization
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/organizations/{{ terraform_install_admin_orgname }}/workspaces"
            method: POST
            headers:
              Content-Type: application/vnd.api+json
              Authorization: "Bearer {{ admin_login }}"
            body:
              data:
                attributes:
                  name: "{{ terraform_install_admin_workspacename }}"
                  auto-apply: true
                type: "workspaces"
            body_format: json
            status_code: 201
          register: create_workspace

        - name: Debug workspace creation
          ansible.builtin.debug:
            msg: "{{ create_workspace }}"
          when: debug | default(false)

    - name: Create archive suitable for upload to a config version
      block:

        - name: Lookup the necessary AWS R53 hosted zone ID
          block:

            - name: List all hosted zones
              amazon.aws.route53_info:
                access_key: "{{ aws_access_key_id }}"
                secret_key: "{{ aws_secret_access_key }}"
                query: hosted_zone
                hosted_zone_method: list_by_name
              register: hosted_zones

            - name: Debug hosted_zones, default false
              ansible.builtin.debug:
                var: hosted_zones
              when: debug | default(false)

            - name: Set r53_zone_id fact with hosted_zones zone ID based on name
              ansible.builtin.set_fact:
                r53_zone_id: "{{ item.Id | replace('/hostedzone/', '') }}"
              when: item.Name == ( aws_domain ~ '.' )
              loop: "{{ hosted_zones.HostedZones | flatten(levels=1) }}"

            - name: Debug r53_zone_id, default false
              ansible.builtin.debug:
                var: r53_zone_id
              when: debug | default(false)

        - name: Create directory for terraform plan in {{ terraform_home_dir }}
          ansible.builtin.file:
            path: "{{ terraform_home_dir }}/plan"
            state: directory
            mode: '0755'

        - name: Copy webservers.tf to terraform host
          ansible.builtin.template:
            src: webservers.tf.j2
            dest: "{{ terraform_home_dir }}/plan/main.tf"
            owner: "{{ terraform_user }}"
            group: "{{ terraform_group }}"
            mode: '0644'

        # - name: Create archive from plan dir
        #   community.general.archive:
        #     path: "{{ terraform_home_dir }}/plan"
        #     dest: "{{ terraform_home_dir }}/{{ content_filename }}"

        - name: Create archive from plan dir
          ansible.builtin.shell:
            cmd: "tar cvzf {{ terraform_home_dir }}/{{ content_filename }} *"
            chdir: "{{ terraform_home_dir }}/plan"
            creates: "{{ terraform_home_dir }}/{{ content_filename }}"

    - name: Create a new config version and upload an archive to it and queue the run automatically
      block:

        - name: Lookup terraform workspace ID
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/organizations/{{ terraform_install_admin_orgname }}/workspaces/{{ terraform_install_admin_workspacename }}"
            method: GET
            headers:
              Content-Type: application/vnd.api+json
              Authorization: Bearer {{ admin_login }}
            body_format: json
            status_code:
              - 200
          register: admin_ws_info
        
        - name: Debug admin_ws_info ID
          ansible.builtin.debug:
            msg: "{{ admin_ws_info.json.data.id }}"
          when: debug | default(false)

        - name: Create a new configuration version and queue the run automatically
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/workspaces/{{ admin_ws_info.json.data.id }}/configuration-versions"
            method: POST
            headers:
              Content-Type: application/vnd.api+json
              Authorization: Bearer {{ admin_login }}
            body:
              data:
                type: "configuration-versions"
                attributes:
                  auto-queue-runs: true
            body_format: json
            status_code:
              - 201
          register: admin_config_version

        - name: Debug admin_config_version
          ansible.builtin.debug:
            msg: "{{ admin_config_version }}"
          when: debug | default(false)

        - name: Debug admin_config_version URL
          ansible.builtin.debug:
            var: admin_config_version.json.data.attributes['upload-url']
          when: debug | default(false)

        - name: Upload archive to admin_config_version.json.data.attributes['upload-url']
          ignore_errors: true
          ansible.builtin.uri:
            url: "{{ admin_config_version.json.data.attributes['upload-url'] }}"
            method: PUT
            headers:
              Content-Type: application/octet-stream
            src: "{{ terraform_home_dir }}/{{ content_filename }}"
            remote_src: true
            status_code:
              - 200
          register: config_vers_upload

        - name: Debug config_vers_upload
          ansible.builtin.debug:
            var: config_vers_upload
          when: debug | default(false)

        - name: Remove archive and plan directory
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ terraform_home_dir }}/{{ content_filename }}"
            - '{{ terraform_home_dir }}/plan'

    - name: Run a terraform destroy run against the admin workspace
      when: terraform_destroy | default(false)
      block:

        - name: Lookup terraform workspace ID
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/organizations/{{ terraform_install_admin_orgname }}/workspaces/{{ terraform_install_admin_workspacename }}"
            method: GET
            headers:
              Content-Type: application/vnd.api+json
              Authorization: Bearer {{ admin_login }}
            body_format: json
            status_code:
              - 200
          register: admin_ws_info
        
        - name: Debug admin_ws_info ID
          ansible.builtin.debug:
            msg: "{{ admin_ws_info.json.data.id }}"
          when: debug | default(false)

        - name: Create destroy run via API
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/runs"
            method: POST
            headers:
              Content-Type: application/vnd.api+json
              Authorization: Bearer {{ admin_login }}
            body:
              data:
                attributes:
                  is-destroy: true
                  message: "Executing a destroy run from AAP"
                type: "runs"
                relationships:
                  workspace:
                    data:
                      type: "workspaces"
                      id: "{{ admin_ws_info.json.data.id }}"
            body_format: json
            status_code:
              - 201
          register: admin_destroy_run

        - name: Debug admin_destroy_run
          ansible.builtin.debug:
            var: admin_destroy_run
          when: debug | default(false)

    - name: Create a new run based on an existing config version and workspace id
      when: false
      block:

        - name: Create run via API
          ansible.builtin.uri:
            url: "https://terraform.{{ install_domain }}/api/v2/runs"
            method: POST
            headers:
              Content-Type: application/vnd.api+json
              Authorization: Bearer {{ admin_login }}
            body:
              data:
                attributes:
                  message: "Executing a run from AAP"
                type: "runs"
                relationships:
                  workspace:
                    data:
                      type: "workspaces"
                      id: "{{ admin_ws_info.json.data.id }}"
                  configuration-version:
                    data:
                      type: "configuration-versions"
                      id: "{{ admin_config_version.json.data.id }}"
            body_format: json
            status_code:
              - 201
          register: admin_create_run

        - name: Debug admin_create_run
          ansible.builtin.debug:
            var: admin_create_run
          when: debug | default(false)

...
