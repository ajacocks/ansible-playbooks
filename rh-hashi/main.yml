---

- name: Provision hosts for AAP-HashiCorp integrated demo
  hosts: aap-hashi-vault-test

# the following vars are needed for this playbook to work
#  vars:
#    sub:
#      uid: <red hat subscription uid>
#      pass: <red hat subscription password>

#    terraform:
#      license: <terraform enterprise license key>

#    ca:
#      privatekey_path: /etc/pki/tls/private/ca-certificate.key
#      certificate_path: /etc/pki/tls/certs/ca-certificate.pem
#      csr_path: /etc/pki/tls/certs/ca-csr.pem

#    vault:
#      api:
#        addr: 127.0.0.1
#        port: 8200
#      cluster:
#        addr: 172.0.0.1
#        port: 8201
#      license: <vault enterprise license key>
#      config: vault.hcl
#      unseal:
#        key_count: 5
#        threshold: 3
#      dir:
#        root_token: /root/.vault
#        unseal_key: /root/.vault
#      ssl:
#        csr: /etc/vault.d/vault.csr
#        key: /etc/vault.d/vault-key.pem
#        cert: /etc/vault.d/vault-cert.pem

  handlers:

    - name: Update system ssl trust db
      ansible.builtin.command:
        cmd: update-ca-trust
      become: true

  tasks:

    - name: Basic system configuration for Vault
      become: true
      block:
        - name: Register subscription for host with Red Hat
          community.general.redhat_subscription:
            state: present
            username: "{{ sub.uid }}"
            password: "{{ sub.pass }}"
            auto_attach: true

        - name: Update all packages on system to current
          ansible.builtin.package:
            disablerepo: '*'
            enablerepo:
              - rhel-9-for-x86_64-baseos-rpms
              - rhel-9-for-x86_64-appstream-rpms
            name: '*'
            state: latest

        - name: Install package dependencies
          ansible.builtin.dnf:
            name:
              - openssl
              - python3-cryptography
              - yum-utils
            state: present

    - name: Create basic signing CA
      become: true
      block:

        - name: Create private key with password protection
          community.crypto.openssl_privatekey:
            path: "{{ ca.privatekey_path }}"

        - name: Create certificate signing request (CSR) for CA certificate
          community.crypto.openssl_csr:
            path: "{{ ca.csr_path }}"
            privatekey_path: "{{ ca.privatekey_path }}"
            common_name: Red Hat HashiCorp CA
            organization_name: "Red Hat"
            organizational_unit_name: "NA"
            state_or_province_name: "NC"
            locality_name: "Raleigh"
            use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
            basic_constraints:
              - 'CA:TRUE'
            basic_constraints_critical: true
            key_usage:
              - keyCertSign
            key_usage_critical: true

        - name: Create self-signed CA certificate from CSR
          community.crypto.x509_certificate:
            path: "{{ ca.certificate_path }}"
            csr_path: "{{ ca.csr_path }}"
            privatekey_path: "{{ ca.privatekey_path }}"
            provider: selfsigned

        - name: Copy new ssl cetificate to system trusted anchors
          ansible.builtin.copy:
            src: "{{ ca.certificate_path }}"
            dest: /etc/pki/ca-trust/source/anchors/vault-cert.pem
            remote_src: true
            owner: root
            group: root
            mode: '0644'
          notify: Update system ssl trust db

    - name: Install vault enterprise
      become: true
      block:

        - name: Add hashicorp release yum repo
          ansible.builtin.yum_repository:
            name: hashicorp
            description: Hashicorp Stable - $basearch
            baseurl: https://rpm.releases.hashicorp.com/RHEL/$releasever/$basearch/stable
            gpgcheck: true
            gpgkey: https://rpm.releases.hashicorp.com/gpg

        - name: Install vault package
          ansible.builtin.package:
            name: vault-enterprise
            state: present

        - name: Install vault enterprise license to /etc/vault.d
          ansible.builtin.copy:
            src: "{{ vault.license }}"
            dest: /etc/vault.d/vault.hclic
            owner: vault
            group: vault
            mode: '0640'

        - name: Install vault enterprise configuration
          ansible.builtin.template:
            src: "{{ vault.config }}.j2"
            dest: /etc/vault.d/vault.hcl
            owner: vault
            group: vault
            mode: '0640'

        - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
          community.crypto.openssl_privatekey:
            path: "{{ vault.ssl.key }}"
            owner: vault
            group: vault
            mode: '0640'

        - name: Check whether certificate exists
          ansible.builtin.stat:
            path: "{{ ca.certificate_path }}"
          register: certificate_exists

        - name: Read existing certificate if exists
          ansible.builtin.slurp:
            src: "{{ ca.certificate_path }}"
          when: certificate_exists.stat.exists
          register: certificate

        - name: Generate a new certificate signing request for vault
          community.crypto.openssl_csr:
            path: "{{ vault.ssl.csr }}"
            privatekey_path: "{{ vault.ssl.key }}"
            common_name: "{{ inventory_hostname }}"
            organization_name: "Red Hat"
            organizational_unit_name: "NA"
            state_or_province_name: "NC"
            locality_name: "Raleigh"
            subject_alt_name:
              - "DNS:localhost"
              - "DNS:{{ ansible_fqdn }}"
              - "IP:127.0.0.1"
              - "IP:{{ ansible_default_ipv4.address }}"
            owner: vault
            group: vault
            mode: '0640'

        - name: Sign ssl certificate and key for vault
          community.crypto.x509_certificate:
            path: "{{ vault.ssl.cert }}"
            privatekey_path: "{{ vault.ssl.key }}"
            csr_path: "{{ vault.ssl.csr }}"
            provider: ownca
            ownca_path: "{{ ca.certificate_path }}"
            ownca_privatekey_path: "{{ ca.privatekey_path }}"
            ownca_not_after: +365d  # valid for three years
            ownca_not_before: "-1d"  # valid since yesterday
            owner: vault
            group: vault
            mode: '0640'

        - name: Start and enable vault service
          ansible.builtin.service:
            name: vault
            state: started
            enabled: true

    - name: Configure vault
      block:

        - name: Create storage directories
          become: true
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0700'
          loop:
            - "{{ vault.dir.root_token }}"
            - "{{ vault.dir.unseal_key }}"

        - name: Check to see if vault is already initialized
          ansible.builtin.command:
            cmd: vault status -format=json
          register: vault_status_result
          ignore_errors: true
          changed_when: false

        - name: Parse output of vault status
          ansible.builtin.set_fact:
            vault_status_parsed: "{{ vault_status_result.stdout | from_json }}"

        - name: Debug vault status
          ansible.builtin.debug:
            var: vault_status_parsed

        - debug:
            var: vault

        - name: Initialise Vault operator
          ansible.builtin.command:
            cmd: "vault operator init -key-shares {{ vault.unseal.key_count }} -key-threshold {{ vault.unseal.threshold }} -format json"
          environment:
            VAULT_ADDR: "https://{{ vault.api.addr }}:{{ vault.api.port }}"
          register: vault_init_results
          when: not vault_status_parsed.initialized

    - name: Write keys to files
      when: not vault_status_parsed.initialized
      become: true
      block:

        - name: Parse output of vault init
          ansible.builtin.set_fact:
            vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

        - name: Write unseal keys to files
          ansible.builtin.template:
            src: unseal_key.j2
            dest: "{{ vault.dir.unseal_key }}/unseal_key_{{ item.0 }}"
            mode: '0600'
          with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"

        - name: Write root token to file
          ansible.builtin.copy:
            content: "{{ vault_init_parsed.root_token }}"
            dest: "{{ vault.dir.root_token }}/rootkey"
            mode: '0600'

    - name: Read keys from files
      become: true
      block:

        - name: Read unseal key contents
          ansible.builtin.shell:
            cmd: "cat {{ vault.dir.unseal_key }}/unseal_key_*"
          register: unseal_keys_result
          changed_when: false

        - name: Get root token from file
          ansible.builtin.command:
            cmd: cat "{{ vault.dir.root_token }}/rootkey"
          register: root_token_result
          changed_when: false

    - name: Unseal vault via API with unseal keys
      when: vault_status_parsed.sealed
      ansible.builtin.uri:
        url: "https://{{ vault.api.addr }}:{{ vault.api.port }}/v1/sys/unseal"
        method: PUT
        body_format: json
        status_code: 200
        body:
          key: "{{ item }}"
      loop: "{{ unseal_keys_result.stdout_lines }}"
      register: unseal_api_result

...
