---

- name: Provision hosts for AAP-HashiCorp integrated demo
  hosts: aap_hashi_vault_test

# the following vars are needed for this playbook to work
#  vars:
#    sub:
#      uid: <red hat subscription uid>
#      pass: <red hat subscription password>

#    terraform:
#      license: <terraform enterprise license key>

#    ca:
#      privatekey_path: /etc/pki/tls/private/ca-certificate.key
#      certificate_path: /etc/pki/tls/certs/ca-certificate.pem
#      csr_path: /etc/pki/tls/certs/ca-csr.pem

#    vault:
#      api:
#        addr: 127.0.0.1
#        port: 8200
#      cluster:
#        addr: 172.0.0.1
#        port: 8201
#      license: <vault enterprise license key>
#      config: vault.hcl
#      unseal:
#        key_count: 5
#        threshold: 3
#      dir:
#        root_token: /root/.vault
#        unseal_key: /root/.vault
#      ssl:
#        csr: /etc/vault.d/vault.csr
#        key: /etc/vault.d/vault-key.pem
#        cert: /etc/vault.d/vault-cert.pem

  roles:
    - name: vault_provision
    - name: openssl_ca
    - name: vault_install

  tasks:

#    - name: Basic system configuration for Vault
#      ansible.builtin.include_role:
#        name: vault_provision

#    - name: Create local OpenSSL CA for offline master
#      ansible.builtin.include_role:
#        name: openssl_ca

#    - name: Install Vault enterprise
#      ansible.builtin.include_role:
#        name: vault_install

    - name: Configure vault
      block:

        - name: Create storage directories
          become: true
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0700'
          loop:
            - "{{ vault.dir.root_token }}"
            - "{{ vault.dir.unseal_key }}"

        - name: Check to see if vault is already initialized
          ansible.builtin.command:
            cmd: vault status -format=json
          register: vault_status_result
          ignore_errors: true
          changed_when: false

        - name: Parse output of vault status
          ansible.builtin.set_fact:
            vault_status_parsed: "{{ vault_status_result.stdout | from_json }}"

        - name: Debug vault status
          ansible.builtin.debug:
            var: vault_status_parsed
          when: debug | default(false)

        - name: Initialise Vault operator
          ansible.builtin.command:
            cmd: "vault operator init -key-shares {{ vault.unseal.key_count }} -key-threshold {{ vault.unseal.threshold }} -format json"
          environment:
            VAULT_ADDR: "https://{{ vault.api.addr }}:{{ vault.api.port }}"
          register: vault_init_results
          when: not vault_status_parsed.initialized

    - name: Write keys to files
      when: not vault_status_parsed.initialized
      become: true
      block:

        - name: Parse output of vault init
          ansible.builtin.set_fact:
            vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

        - name: Write unseal keys to files
          ansible.builtin.template:
            src: unseal_key.j2
            dest: "{{ vault.dir.unseal_key }}/unseal_key_{{ item.0 }}"
            mode: '0600'
          with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"

        - name: Write root token to file
          ansible.builtin.copy:
            content: "{{ vault_init_parsed.root_token }}"
            dest: "{{ vault.dir.root_token }}/rootkey"
            mode: '0600'

    - name: Read keys from files
      become: true
      block:

        - name: Read unseal key contents
          ansible.builtin.shell:
            cmd: "cat {{ vault.dir.unseal_key }}/unseal_key_*"
          register: unseal_keys_result
          changed_when: false

        - name: Get root token from file
          ansible.builtin.command:
            cmd: cat "{{ vault.dir.root_token }}/rootkey"
          register: root_token_result
          changed_when: false

        - name: Debug unseal keys
          ansible.builtin.debug:
            var: unseal_keys_result
          when: debug | default(false)

        - name: Debug root token
          ansible.builtin.debug:
            var: root_token_result
          when: debug | default(false)

    - name: Unseal vault and login with root token
      block:
        - name: Unseal vault via API with unseal keys
          when: vault_status_parsed.sealed
          ansible.builtin.uri:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}/v1/sys/unseal"
            method: PUT
            body_format: json
            status_code: 200
            body:
              key: "{{ item }}"
          loop: "{{ unseal_keys_result.stdout_lines }}"
          register: unseal_api_result

        - name: Login and use the resulting token
          community.hashi_vault.vault_login:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}"
            auth_method: token
            token: "{{ root_token_result.stdout }}"
          register: login_data

        - name: Debug login data
          ansible.builtin.debug:
            var: login_data
          when: debug | default(false)

    - name: Create terraform project directory
      ansible.builtin.file:
        path: ~/terraform/
        state: directory
        mode: '0755'

    - name: Install terraform template to vault server
      ansible.builtin.template:
        src: vault.tf.j2
        dest: ~/terraform/vault.tf
        mode: '0644'

    - name: Install package dependencies
      ansible.builtin.dnf:
        name:
          - terraform
        state: present
      become: true

    - name: Basic deploy of a service
      community.general.terraform:
        project_path: ~/terraform
        force_init: true
        state: present

    - fail:

    - name: Enable vault secrets pki module
      block:

        - name: Check to see if secrets engine is enabled
          ansible.builtin.uri:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}/v1/sys/mounts"
            method: GET
            status_code: 200
            return_content: true
            headers:
              X-Vault-Token: "{{ login_data.login.auth.client_token }}"
          register: vault_secrets_list_results

        - name: Debug secrets data
          ansible.builtin.debug:
            var: vault_secrets_list_results.json.data
          when: debug | default(false)

        - name: Check if secrets pki enabled
          ansible.builtin.set_fact:
            pki_enabled: true
          loop: "{{ lookup('dict', vault_secrets_list_results.json.data) }}"
          when: "'pki/' in item.key"

        - name: Debug secrets pki enabled
          ansible.builtin.debug:
            msg: Vault's secrets engine is enabled
          when: debug | default(false) and pki_enabled | default(false)

    - name: Tune vault secrets pki module
      when: pki_enabled | default(false)
      block:

        - name: Tune vault secrets with a maximum time-to-live (TTL) of 87600 hours
          when: pki_enabled | default(false)
          ansible.builtin.uri:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}/v1/sys/mounts/pki/tune"
            method: POST
            body_format: json
            status_code: [200, 204]
            return_content: true
            headers:
              X-Vault-Token: "{{ login_data.login.auth.client_token }}"
            body:
              max_lease_ttl: "87600h"
          register: pki_tune_api_result

        - name: Debug secrets pki tuning
          ansible.builtin.debug:
            var: pki_tune_api_result
          when: debug | default(false)

    - name: Create intermediate CA in vault
      when: pki_enabled | default(false)
      block:

# vault write -format=json pki_int/intermediate/generate/internal \
#       common_name="aap.jajcs.net Intermediate Authority" \
#       issuer_name="aap-jajcs-net-intermediate" \
#       | jq -r '.data.csr' > pki_intermediate.csr

        - name: Create certificate authority
          community.hashi_vault.vault_write:
            url: https://{{ vault.api.addr }}:{{ vault.api.port }}
            path: pki/intermediate/generate/internal
            data:
              common_name: "aap.jajcs.net Intermediate Authority"
              issuer_name: "aap-jajcs-net-intermediate"
            auth_method: token
            token: "{{ login_data.login.auth.client_token }}"
          register: ca_create_result

        - name: Debug create CA
          ansible.builtin.debug:
            var: ca_create_result
          when: debug | default(false)

...
