---

- name: Provision vault for AAP-HashiCorp integrated demo
  hosts: "{{ groups['aap_hashi_vault'] }}"
  tags: vault

# the following vars are needed for this playbook to work
#
# in group_vars.yml, you need to:
#   - rename all-example.yml to all.yml
#   - replace the following variables' content in group_vars/all.yml:
#     - sub.uid
#     - sub.gid
#     - terraform.license
#     - aap.installer    # if you want to use a newer version
#     - aap.admin_pass
#     - aap.admin_pass
#     - vault.domain
#     - vault.intermediate_name
#     - vailt.resource_name
#     - vault.license
#   - rename inventory.example to inventory
#     - replace hostnames with your hosts' names
# you will need NFR or actual HashiCorp Vault and Terraform license keys

  roles:
    - name: vault_provision
    - name: vault_openssl_ca
    - name: vault_install

  tasks:

    - name: Configure vault
      block:

        - name: Create storage directories
          become: true
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0700'
          loop:
            - "{{ vault.dir.root_token }}"
            - "{{ vault.dir.unseal_key }}"

        - name: Check to see if vault is already initialized
          ansible.builtin.command:
            cmd: vault status -format=json
          register: vault_status_result
          ignore_errors: true
          changed_when: false

        - name: Parse output of vault status
          ansible.builtin.set_fact:
            vault_status_parsed: "{{ vault_status_result.stdout | from_json }}"

        - name: Debug vault status
          ansible.builtin.debug:
            var: vault_status_parsed
          when: debug | default(false)

        - name: Initialize Vault operator
          ansible.builtin.command:
            cmd: "vault operator init -key-shares {{ vault.unseal.key_count }} -key-threshold {{ vault.unseal.threshold }} -format json"
          environment:
            VAULT_ADDR: "https://{{ vault.api.addr }}:{{ vault.api.port }}"
          register: vault_init_results
          when: not vault_status_parsed.initialized

    - name: Write keys to files
      when: not vault_status_parsed.initialized
      become: true
      block:

        - name: Parse output of vault init
          ansible.builtin.set_fact:
            vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

        - name: Write unseal keys to files
          ansible.builtin.template:
            src: unseal_key.j2
            dest: "{{ vault.dir.unseal_key }}/unseal_key_{{ item.0 }}"
            mode: '0600'
          with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"

        - name: Write root token to file
          ansible.builtin.copy:
            content: "{{ vault_init_parsed.root_token }}"
            dest: "{{ vault.dir.root_token }}/rootkey"
            mode: '0600'

    - name: Read keys from files
      become: true
      block:

        - name: Read unseal key contents
          ansible.builtin.shell:
            cmd: "cat {{ vault.dir.unseal_key }}/unseal_key_*"
          register: unseal_keys_result
          changed_when: false

        - name: Get root token from file
          ansible.builtin.command:
            cmd: cat "{{ vault.dir.root_token }}/rootkey"
          register: root_token_result
          changed_when: false

        - name: Set root token var
          ansible.builtin.set_fact:
            root_token: "{{ root_token_result.stdout }}"

        - name: Debug unseal keys
          ansible.builtin.debug:
            var: unseal_keys_result
          when: debug | default(false)

        - name: Debug root token
          ansible.builtin.debug:
            var: root_token_result
          when: debug | default(false)

    - name: Unseal vault and login with root token
      block:
        - name: Unseal vault via API with unseal keys
          when: vault_status_parsed.sealed
          ansible.builtin.uri:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}/v1/sys/unseal"
            method: PUT
            body_format: json
            status_code: 200
            body:
              key: "{{ item }}"
          loop: "{{ unseal_keys_result.stdout_lines }}"
          register: unseal_api_result

        - name: Login and use the resulting token
          community.hashi_vault.vault_login:
            url: "https://{{ vault.api.addr }}:{{ vault.api.port }}"
            auth_method: token
            token: "{{ root_token }}"
          register: login_data

        - name: Debug login data
          ansible.builtin.debug:
            var: login_data
          when: debug | default(false)

    - name: Create terraform project directories
      ansible.builtin.file:
        path: "{{ terraform.certdir }}"
        state: directory
        mode: '0755'

    - name: Install terraform template to vault server
      ansible.builtin.template:
        src: vault.tf.j2
        dest: "{{ terraform.dir }}/vault.tf"
        mode: '0644'

    - name: Install package dependencies
      ansible.builtin.dnf:
        name:
          - terraform
        state: present
      become: true

    - name: Deploy vault configuration with SSL certificates
      community.general.terraform:
        project_path: "{{ terraform.dir }}"
        force_init: true
        state: present
      register: tf_vault_result

    - name: Debug terraform apply
      ansible.builtin.debug:
        var: tf_vault_result
      when: debug | default(false)

    - name: Debug terraform apply
      ansible.builtin.debug:
        var: tf_vault_result.outputs.vault_pki_secret_backend_cert_aap_aap_jajcs_net_ca_chain.value
      when: debug | default(false)

    - name: Write certificates and keys to files
      block:

        - name: Copy intermediate cert to certdir
          ansible.builtin.copy:
            src: "{{ terraform.dir }}/intermediate.cert.pem"
            dest: "{{ terraform.certdir }}/"
            mode: '0644'
            remote_src: true

        - name: Write ca certificate to file
          ansible.builtin.copy:
            content: "{{ tf_vault_result['outputs']['vault_pki_secret_backend_root_cert_root_2025']['value'] }}"
            dest: "{{ terraform.certdir }}/root_2025-ca.crt"
            mode: '0644'
          register: root_result

        - name: Write chain certificates to files
          ansible.builtin.copy:
            content: "{{ tf_vault_result['outputs']['vault_pki_secret_backend_cert_' + item + '_' + vault.resource_name + '_ca_chain']['value'] }}"
            dest: "{{ terraform.certdir }}/{{ item }}.{{ vault.resource_name }}-ca_chain.crt"
            mode: '0644'
          loop:
            - aap
            - gitlab
          register: chain_result

        - name: Write server certificates to files
          ansible.builtin.copy:
            content: "{{ tf_vault_result['outputs']['vault_pki_secret_backend_cert_' + item + '_' + vault.resource_name + '_cert']['value'] }}"
            dest: "{{ terraform.certdir }}/{{ item }}.{{ vault.resource_name }}-server.crt"
            mode: '0644'
          loop:
            - aap
            - gitlab
          register: cert_result

        - name: Write server keys to files
          ansible.builtin.copy:
            content: "{{ tf_vault_result['outputs']['vault_pki_secret_backend_cert_' + item + '_' + vault.resource_name + '_private_key']['value'] }}"
            dest: "{{ terraform.certdir }}/{{ item }}.{{ vault.resource_name }}-server.key"
            mode: '0644'
          loop:
            - aap
            - gitlab
          register: key_result

        - name: Write serial numbers to files
          ansible.builtin.copy:
            content: "{{ tf_vault_result['outputs']['vault_pki_secret_backend_cert_' + item + '_' + vault.resource_name + '_serial_number']['value'] }}"
            dest: "{{ terraform.certdir }}/{{ item }}.{{ vault.resource_name }}-serial.txt"
            mode: '0644'
          loop:
            - aap
            - gitlab
          register: serial_result

        - name: Find all certs
          ansible.builtin.find:
            paths: "{{ terraform.certdir }}"
            patterns: "*"
          register: cert_files

        - name: Copy certs back
          ansible.builtin.fetch:
            src: "{{ item.path }}"
            dest: "{{ local.certdir }}/"
            flat: true
          loop: "{{ cert_files.files }}"

- name: Provision aap for AAP-HashiCorp integrated demo
  hosts: "{{ groups['aap_hashi_aap'][0] }}"
  tags: aap

  roles:
    - name: aap_provision
    - name: aap_install

- name: Run installation for aap
  hosts: "{{ groups['aap_hashi_aap'][0] }}"
  tags: aap
  remote_user: "{{ aap.user }}"

  tasks:

    - name: Run the Ansible Automation Platform setup program
      ansible.builtin.shell: "ansible-playbook -i inventory ansible.containerized_installer.install"
      args:
        chdir: "{{ aap.dir }}/{{ installer_extracted }}"
      async: 10000
      poll: 20
      changed_when: false

    - name: Wait for automation controller to be running
      ansible.builtin.uri: # use the first host from the list if no hostname is defined
        # url: https://{{ controller_hostname }}:{{ __aap_setup_inst_controller_port }}/
        url: https://aap.{{ vault.domain }}:443/
        method: GET
        user: admin
        password: "{{ aap.admin_pass }}"
        force_basic_auth: true
        status_code: 200
        validate_certs: "{{ aap.validate_certs | default(omit) }}"
      register: __aap_setup_inst_result
      until: __aap_setup_inst_result.status == 200
      retries: 90
      delay: 10

    - fail:

    - name: Wait for automation hub to be running
      ansible.builtin.uri: # use the first host from the list if no hostname is defined
        url: https://{{ ah_hostname }}:{{ __aap_setup_inst_hub_port }}/api/galaxy/
        method: GET
        user: admin
        password: "{{ aap_setup_prep_inv_secrets.all.hub_admin_password | default(aap_setup_prep_inv_vars.all.hub_admin_password) }}"
        force_basic_auth: true
        status_code: 200
        validate_certs: "{{ ah_validate_certs | default(omit) }}"
      register: __aap_setup_inst_result_ah
      until: __aap_setup_inst_result_ah.status == 200
      retries: 90
      delay: 10
      when: "'automationhub' in aap_setup_prep_inv_nodes"

    - name: Wait for EDA controller to be running
      ansible.builtin.uri: # use the first host from the list if no hostname is defined
        url: https://{{ eda_hostname }}:{{ __aap_setup_inst_eda_port }}/
        method: GET
        user: admin
        password: "{{ aap_setup_prep_inv_secrets.all.eda_admin_password | default(aap_setup_prep_inv_vars.all.eda_admin_password) }}"
        validate_certs: "{{ eda_validate_certs | default('false') }}"
        force_basic_auth: true
      register: __aap_setup_inst_result_eda
      until: __aap_setup_inst_result_eda.status == 200
      retries: 90
      delay: 10
      when: "'automationeda' in aap_setup_prep_inv_nodes"


...
